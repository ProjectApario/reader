package main

import (
	`bytes`
	`fmt`
	`io`
	`io/fs`
	`log`
	`net/http`
	`os`
	`path/filepath`
	`strings`
	`sync`
	`sync/atomic`
	`time`

	`github.com/gin-gonic/gin`
)

var pending_viewport_placeholder_svg_checksum atomic.Value
var once_calculate_checksum sync.Once

func r_get_pending_viewport_placeholder_svg(c *gin.Context) {
	c.Header("Cache-Control", "public, max-age=31881600") // Cache for 369 days

	svgCode := `<?xml version="1.0" encoding="UTF-8"?>
<svg width="250px" height="322px" viewBox="0 0 250 322" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <title>Artboard</title>
    <g id="Artboard" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <rect id="Rectangle" fill="#F3F3F3" x="0" y="0" width="250" height="322"></rect>
        <path d="M42.005,134.053 C42.5,133.954 42.731,133.558 42.83,133.294 C43.16,132.634 43.193,131.842 43.226,131.083 C43.259,129.136 43.292,125.407 43.292,123.46 C44.117,123.691 45.107,123.625 45.932,123.427 C47.021,123.163 48.044,122.767 49.034,122.272 C50.387,121.579 51.641,120.655 52.697,119.467 C53.489,118.576 54.314,117.454 54.611,116.299 C54.809,115.441 54.743,114.517 54.281,113.659 C53.753,112.702 52.829,112.075 51.806,112.009 C48.407,111.811 45.734,113.494 43.457,115.837 C43.457,115.441 43.457,114.979 43.589,114.583 C43.589,114.517 43.622,114.451 43.655,114.385 C43.787,114.121 43.919,113.923 43.919,113.659 C43.886,113.494 43.787,113.197 43.523,113.098 C43.292,113.065 43.061,113.131 42.896,113.362 C42.467,114.22 42.269,115.243 42.269,116.233 L42.203,120.226 C42.1964,120.7804 42.19376,121.42984 42.193232,122.137096 L42.193793,123.236689 C42.1946345,123.803513 42.1961442,124.39239 42.1975426,124.987615 L42.1999599,126.181877 C42.20267,127.972008 42.1997,129.72505 42.17,131.017 C42.137,131.842 42.005,133.294 42.005,134.053 Z M43.292,122.569 C43.292,121.381 43.358,118.939 43.391,117.619 C44.579,116.068 46.031,114.748 47.648,113.989 C48.671,113.494 49.793,113.23 50.948,113.131 C51.872,113.065 52.697,113.329 53.225,114.055 C53.588,114.583 53.621,115.177 53.522,115.771 C53.258,117.091 52.235,118.444 51.278,119.335 C50.387,120.193 49.397,120.853 48.308,121.381 C47.318,121.843 46.262,122.173 45.206,122.437 L44.216,122.569 C43.919,122.602 43.589,122.602 43.292,122.569 Z M59.198,133.657 C61.277,132.007 62.465,129.697 63.356,127.453 C63.521,128.179 63.686,128.905 63.917,129.598 C64.478,131.182 64.94,132.667 66.392,133.723 C66.689,133.789 67.217,133.855 67.184,133.426 C65.831,132.106 65.501,130.753 64.94,129.004 C64.61,127.915 64.346,126.859 64.214,125.671 C64.115,125.374 64.049,125.176 63.917,124.945 C63.851,124.384 63.851,123.691 63.521,123.229 C63.224,122.437 62.663,121.744 61.871,121.381 C61.541,121.216 61.211,121.216 60.881,121.315 C60.584,121.414 60.287,121.579 59.99,121.744 C57.845,123.559 56.459,125.869 55.799,128.377 C55.535,129.334 55.337,130.621 55.469,131.743 C55.601,132.634 55.964,133.426 56.789,133.921 C57.515,134.383 58.538,134.185 59.198,133.657 Z M57.053,132.634 C56.789,132.271 56.657,131.842 56.624,131.347 C56.591,130.852 56.657,130.324 56.69,129.829 C56.987,128.344 57.482,126.925 58.208,125.605 C58.802,124.582 59.726,123.328 60.749,122.635 C61.013,122.47 61.277,122.371 61.607,122.47 C62.036,122.701 62.366,123.13 62.63,123.592 C62.828,123.955 63.059,124.549 63.158,124.879 C62.927,125.209 62.894,125.605 62.828,125.968 C61.97,128.542 60.617,131.05 58.274,132.865 C57.878,132.997 57.35,132.931 57.053,132.634 Z M72.134,141.445 C73.19,140.884 73.85,140.125 74.246,139.168 C74.609,138.244 74.741,137.188 74.807,136.066 C74.84,135.01 74.84,133.888 74.84,132.799 C75.038,132.601 75.302,132.403 75.533,132.205 C75.797,131.974 76.061,131.743 76.259,131.479 C76.391,131.281 76.325,130.885 76.127,130.885 C75.896,131.017 75.665,131.149 75.434,131.314 C75.236,131.413 75.038,131.545 74.873,131.611 C74.873,129.862 74.972,128.212 75.137,126.529 C75.071,126.133 75.269,125.704 75.17,125.308 C75.071,125.044 74.807,124.813 74.51,124.78 C74.345,124.78 74.18,124.846 74.015,124.912 C74.18,124.12 74.378,123.163 74.015,122.371 C73.784,121.909 73.322,121.579 72.926,121.381 C72.365,121.249 71.705,121.315 71.243,121.612 C70.517,122.107 69.956,122.767 69.494,123.394 C68.669,124.549 68.174,125.869 68.042,127.288 C68.042,128.212 68.438,129.136 69.362,129.532 C70.22,129.73 70.946,129.499 71.573,129.037 C72.101,128.641 72.563,128.08 73.025,127.486 L74.081,126.067 C73.982,128.146 73.751,130.258 73.784,132.337 C72.266,133.525 70.715,134.812 69.626,136.462 C68.933,137.518 68.174,138.706 68.405,140.158 C68.636,140.818 69.164,141.379 69.824,141.676 C70.517,141.973 71.507,141.808 72.134,141.445 Z M69.956,128.542 C69.692,128.443 69.395,128.245 69.329,127.981 C69.164,127.189 69.263,126.463 69.527,125.77 C69.857,124.813 70.748,123.196 71.639,122.602 C72.035,122.338 72.563,122.272 73.025,122.734 C73.223,123.163 73.289,123.625 73.19,124.12 C73.157,124.483 73.025,124.846 72.893,125.209 C72.761,125.605 72.596,125.968 72.464,126.331 C72.134,126.925 71.771,127.585 71.243,128.08 C70.913,128.41 70.484,128.575 69.956,128.542 Z M69.923,140.455 C69.593,140.191 69.527,139.795 69.494,139.366 C69.626,138.541 70.022,137.815 70.484,137.122 C71.375,135.802 72.464,134.68 73.718,133.624 C73.751,134.383 73.784,135.208 73.751,136 C73.718,136.825 73.586,137.65 73.322,138.376 C72.992,139.366 72.299,140.224 71.177,140.719 C70.715,140.818 70.253,140.719 69.923,140.455 Z M83.222,134.152 C84.245,134.053 85.235,133.558 86.126,132.865 C86.786,132.337 87.38,131.71 87.842,131.017 C88.172,130.489 88.568,129.697 88.601,129.07 C88.601,128.938 88.304,128.608 88.139,128.773 C87.743,129.895 86.918,130.852 85.928,131.71 C85.4,132.172 84.707,132.601 83.981,132.865 C83.222,133.162 82.397,133.228 81.605,132.766 C80.747,132.271 80.45,131.347 80.285,130.423 C80.846,130.06 81.473,129.631 82.1,129.169 C82.727,128.707 83.354,128.212 83.882,127.717 C83.981,127.585 84.146,127.42 84.278,127.288 L84.773,126.826 C85.136,126.496 85.499,126.133 85.796,125.803 C86.159,125.374 86.456,124.813 86.324,124.12 C85.862,123.064 85.004,121.843 83.849,121.447 C82.958,121.15 81.572,121.546 80.846,122.14 C80.054,123.031 79.526,124.186 79.295,125.341 C78.965,126.826 78.965,128.41 79.064,129.895 C78.8,130.027 78.47,130.258 78.239,130.357 C78.107,130.423 77.942,130.456 77.744,130.522 C77.546,130.555 77.348,130.621 77.15,130.72 C76.985,130.984 77.117,131.281 77.249,131.413 C77.678,131.611 77.975,131.611 78.338,131.512 C78.569,131.446 78.932,131.248 79.196,131.05 C79.295,131.38 79.394,131.71 79.559,132.007 C79.724,132.37 79.988,132.733 80.384,133.162 C81.077,133.888 82.133,134.251 83.222,134.152 Z M80.186,129.103 C80.12,127.849 80.153,126.595 80.483,125.44 C80.714,124.549 81.044,123.757 81.572,123.064 C82.1,122.569 83.189,122.437 83.849,122.668 C84.476,123.097 84.938,123.79 85.235,124.45 C85.136,125.11 84.509,125.572 84.08,126.001 C83.519,126.595 82.859,127.189 82.133,127.717 C81.473,128.212 80.813,128.674 80.186,129.103 Z M103.286,134.218 C105.233,134.086 107.015,133.525 108.665,132.667 C110.381,131.809 111.14,131.314 112.691,130.027 C112.922,129.829 113.219,129.598 113.483,129.334 C113.78,129.037 114.044,128.74 114.242,128.377 C114.308,128.179 114.044,128.014 113.879,128.08 C112.031,129.598 110.744,130.522 108.764,131.512 C107.609,132.106 106.388,132.535 105.134,132.832 C104.276,133.063 103.187,133.36 102.296,132.931 C101.603,132.601 101.207,131.908 101.174,131.215 C100.943,128.179 101.174,123.625 101.636,119.929 L102.527,112.669 C102.494,112.438 102.263,112.108 101.966,112.108 C101.636,112.207 101.537,112.504 101.438,112.735 C100.382,118.741 99.689,126.331 100.019,131.215 C100.085,131.974 100.283,132.634 100.745,133.195 C101.372,133.987 102.296,134.284 103.286,134.218 Z M122.162,132.568 C123.218,131.413 123.944,129.928 124.241,128.377 C124.538,126.76 124.373,125.11 123.68,123.625 C123.416,123.031 122.954,122.404 122.36,121.975 C122.03,121.744 121.634,121.546 121.205,121.48 C121.106,121.249 120.776,121.15 120.578,121.183 C119.588,121.414 118.73,122.074 117.971,122.8 C116.684,124.021 115.76,125.539 115.265,127.156 C114.803,128.74 114.77,130.423 115.364,132.106 C115.727,133.096 116.75,133.954 117.773,134.152 C119.522,134.449 121.007,133.789 122.162,132.568 Z M118.004,132.997 C117.245,132.832 116.486,132.238 116.288,131.446 C115.958,129.961 116.024,128.476 116.453,127.156 C117.014,125.506 117.938,123.955 119.489,122.965 L119.951,122.668 C120.116,122.569 120.281,122.47 120.446,122.338 C120.71,122.173 121.04,122.173 121.37,122.503 C122.261,123.163 122.954,124.021 123.119,125.044 C123.317,126.199 123.317,127.42 123.053,128.542 C122.756,129.961 122.063,131.248 120.908,132.238 C120.149,132.898 119.093,133.261 118.004,132.997 Z M129.422,133.657 C131.501,132.007 132.689,129.697 133.58,127.453 C133.745,128.179 133.91,128.905 134.141,129.598 C134.702,131.182 135.164,132.667 136.616,133.723 C136.913,133.789 137.441,133.855 137.408,133.426 C136.055,132.106 135.725,130.753 135.164,129.004 C134.834,127.915 134.57,126.859 134.438,125.671 C134.339,125.374 134.273,125.176 134.141,124.945 C134.075,124.384 134.075,123.691 133.745,123.229 C133.448,122.437 132.887,121.744 132.095,121.381 C131.765,121.216 131.435,121.216 131.105,121.315 C130.808,121.414 130.511,121.579 130.214,121.744 C128.069,123.559 126.683,125.869 126.023,128.377 C125.759,129.334 125.561,130.621 125.693,131.743 C125.825,132.634 126.188,133.426 127.013,133.921 C127.739,134.383 128.762,134.185 129.422,133.657 Z M127.277,132.634 C127.013,132.271 126.881,131.842 126.848,131.347 C126.815,130.852 126.881,130.324 126.914,129.829 C127.211,128.344 127.706,126.925 128.432,125.605 C129.026,124.582 129.95,123.328 130.973,122.635 C131.237,122.47 131.501,122.371 131.831,122.47 C132.26,122.701 132.59,123.13 132.854,123.592 C133.052,123.955 133.283,124.549 133.382,124.879 C133.151,125.209 133.118,125.605 133.052,125.968 C132.194,128.542 130.841,131.05 128.498,132.865 C128.102,132.997 127.574,132.931 127.277,132.634 Z M142.787,132.535 C144.338,130.291 145.361,127.816 146.219,125.275 C146.351,126.529 146.318,127.783 146.516,128.971 C146.681,129.862 146.912,130.687 147.506,131.413 C147.638,131.578 148.001,131.776 148.364,131.578 C148.331,131.413 148.265,131.281 148.232,131.182 C148.1,130.852 147.902,130.555 147.836,130.192 C147.209,127.255 147.242,124.186 147.341,121.15 C147.4004,119.4274 147.62612,117.7642 147.8756,116.103376 L148.12772,114.441232 C148.21088,113.88604 148.2914,113.329 148.364,112.768 C148.397,112.438 147.803,111.877 147.44,112.438 C147.143,113.395 146.978,114.385 146.846,115.375 C146.714,116.365 146.615,117.388 146.45,118.411 C146.318,119.434 146.318,120.49 146.252,121.513 C146.219,122.239 146.087,122.965 145.856,123.592 C145.757,123.196 145.625,122.833 145.361,122.503 C144.866,121.909 144.074,121.48 143.282,121.447 C141.896,121.348 140.774,122.437 140.081,123.559 C139.157,125.011 138.398,126.76 138.134,128.575 C137.903,129.994 137.969,131.446 138.464,132.898 C138.86,133.558 139.52,134.02 140.246,134.086 C141.302,134.185 142.193,133.393 142.787,132.535 Z M140.081,132.898 C139.685,132.7 139.454,132.37 139.322,131.941 C139.19,131.578 139.124,131.116 139.124,130.654 C139.124,130.192 139.157,129.73 139.157,129.301 C139.487,127.618 139.916,126.001 140.774,124.549 C141.17,123.922 141.665,123.328 142.292,122.767 C142.655,122.536 143.15,122.437 143.579,122.602 C144.008,122.734 144.404,122.998 144.602,123.394 C144.866,123.955 144.767,124.681 144.767,125.275 C144.767,125.407 144.866,125.671 145.031,125.737 C144.206,128.014 143.249,130.258 141.698,132.172 C141.236,132.733 140.708,133.096 140.081,132.898 Z M158.132,115.276 C158.198,114.88 157.967,114.583 157.769,114.418 C156.317,113.098 154.568,112.405 152.588,112.372 C152.258,112.636 152.291,113.296 152.621,113.329 C154.073,113.626 155.426,113.989 156.746,114.583 L157.373,114.946 C157.571,115.045 157.802,115.177 158.132,115.276 Z M155.921,134.086 C156.449,133.954 156.944,133.624 157.307,133.228 C157.835,132.634 158.264,131.908 158.396,131.248 L158.528,130.654 C158.561,130.456 158.561,130.225 158.297,129.994 C158.033,130.225 157.901,130.489 157.802,130.72 C157.703,130.951 157.637,131.215 157.505,131.446 C157.241,131.809 156.977,132.238 156.614,132.535 C156.284,132.799 155.954,133.03 155.558,132.997 C155.36,132.997 154.964,132.634 154.931,132.436 C154.271,130.192 154.634,125.737 155.063,122.404 C155.096,122.14 155.129,121.81 154.898,121.546 C154.667,121.414 154.172,121.282 154.007,121.546 C153.182,122.8 152.555,124.087 151.829,125.374 C151.103,126.661 150.311,127.915 149.288,129.07 C149.189,129.202 149.222,129.334 149.321,129.4 C149.42,129.466 149.552,129.499 149.651,129.499 C149.882,129.466 150.146,129.301 150.311,129.169 C151.103,128.311 151.73,127.42 152.291,126.496 C152.786,125.671 153.248,124.879 153.71,124.021 C153.479,126.727 153.347,129.433 153.71,132.139 C153.809,132.799 154.007,133.36 154.535,133.822 C154.832,134.086 155.525,134.119 155.921,134.086 Z M169.022,134.053 C170.375,132.898 171.332,131.512 172.025,129.994 C172.058,129.862 171.827,129.565 171.662,129.73 L170.441,131.314 C170.045,131.743 169.649,132.172 169.187,132.502 C169.286,131.182 169.352,129.829 169.319,128.509 C169.286,127.123 169.385,125.638 169.187,124.252 C169.055,123.394 168.824,122.602 168.395,121.876 C168.032,121.579 167.669,121.381 167.207,121.348 C166.712,121.282 166.349,121.546 166.019,121.744 C164.93,122.767 164.138,123.955 163.445,125.176 C162.752,126.43 162.191,127.816 161.696,129.169 C161.465,126.859 161.333,124.516 161.036,122.206 L160.871,121.876 C160.706,121.513 160.475,121.183 160.046,121.117 C159.749,121.183 159.683,121.546 159.716,121.711 C160.079,122.569 160.145,123.526 160.211,124.45 C160.31,126.133 160.607,129.004 160.673,131.182 C160.673,131.809 160.706,132.964 160.706,133.558 C160.838,134.02 161.498,133.954 161.63,133.591 C161.861,132.007 162.191,130.423 162.719,128.938 C163.346,127.09 164.171,125.341 165.392,123.79 C165.722,123.394 166.085,122.833 166.514,122.569 C166.877,122.371 167.24,122.338 167.537,122.635 C167.669,122.734 167.735,122.899 167.801,123.064 C167.867,123.229 167.9,123.394 167.933,123.592 C168.23,126.463 168.296,129.565 168.098,132.436 C168.131,132.535 168.131,132.634 168.131,132.733 C168.098,133.03 168.032,133.393 168.098,133.69 C168.197,133.987 168.659,134.35 169.022,134.053 Z M177.008,141.445 C178.064,140.884 178.724,140.125 179.12,139.168 C179.483,138.244 179.615,137.188 179.681,136.066 C179.714,135.01 179.714,133.888 179.714,132.799 C179.912,132.601 180.176,132.403 180.407,132.205 C180.671,131.974 180.935,131.743 181.133,131.479 C181.265,131.281 181.199,130.885 181.001,130.885 C180.77,131.017 180.539,131.149 180.308,131.314 C180.11,131.413 179.912,131.545 179.747,131.611 C179.747,129.862 179.846,128.212 180.011,126.529 C179.945,126.133 180.143,125.704 180.044,125.308 C179.945,125.044 179.681,124.813 179.384,124.78 C179.219,124.78 179.054,124.846 178.889,124.912 C179.054,124.12 179.252,123.163 178.889,122.371 C178.658,121.909 178.196,121.579 177.8,121.381 C177.239,121.249 176.579,121.315 176.117,121.612 C175.391,122.107 174.83,122.767 174.368,123.394 C173.543,124.549 173.048,125.869 172.916,127.288 C172.916,128.212 173.312,129.136 174.236,129.532 C175.094,129.73 175.82,129.499 176.447,129.037 C176.975,128.641 177.437,128.08 177.899,127.486 L178.955,126.067 C178.856,128.146 178.625,130.258 178.658,132.337 C177.14,133.525 175.589,134.812 174.5,136.462 C173.807,137.518 173.048,138.706 173.279,140.158 C173.51,140.818 174.038,141.379 174.698,141.676 C175.391,141.973 176.381,141.808 177.008,141.445 Z M174.83,128.542 C174.566,128.443 174.269,128.245 174.203,127.981 C174.038,127.189 174.137,126.463 174.401,125.77 C174.731,124.813 175.622,123.196 176.513,122.602 C176.909,122.338 177.437,122.272 177.899,122.734 C178.097,123.163 178.163,123.625 178.064,124.12 C178.031,124.483 177.899,124.846 177.767,125.209 C177.635,125.605 177.47,125.968 177.338,126.331 C177.008,126.925 176.645,127.585 176.117,128.08 C175.787,128.41 175.358,128.575 174.83,128.542 Z M174.797,140.455 C174.467,140.191 174.401,139.795 174.368,139.366 C174.5,138.541 174.896,137.815 175.358,137.122 C176.249,135.802 177.338,134.68 178.592,133.624 C178.625,134.383 178.658,135.208 178.625,136 C178.592,136.825 178.46,137.65 178.196,138.376 C177.866,139.366 177.173,140.224 176.051,140.719 C175.589,140.818 175.127,140.719 174.797,140.455 Z M187.304,133.789 C187.634,133.129 187.931,132.139 187.7,131.314 C187.634,131.017 187.469,130.555 187.04,130.456 C186.611,130.39 186.182,130.621 185.918,130.918 C185.324,131.611 185.192,132.7 185.489,133.591 C185.588,133.921 185.885,134.119 186.149,134.251 C186.578,134.35 187.073,134.152 187.304,133.789 Z M196.478,133.789 C196.808,133.129 197.105,132.139 196.874,131.314 C196.808,131.017 196.643,130.555 196.214,130.456 C195.785,130.39 195.356,130.621 195.092,130.918 C194.498,131.611 194.366,132.7 194.663,133.591 C194.762,133.921 195.059,134.119 195.323,134.251 C195.752,134.35 196.247,134.152 196.478,133.789 Z M205.652,133.789 C205.982,133.129 206.279,132.139 206.048,131.314 C205.982,131.017 205.817,130.555 205.388,130.456 C204.959,130.39 204.53,130.621 204.266,130.918 C203.672,131.611 203.54,132.7 203.837,133.591 C203.936,133.921 204.233,134.119 204.497,134.251 C204.926,134.35 205.421,134.152 205.652,133.789 Z" id="PageLoading..." fill="#999999" fill-rule="nonzero"></path>
    </g>
</svg>`

	if pending_viewport_placeholder_svg_checksum.Load() == nil {
		gc := c.Copy()
		go func(gc *gin.Context, svgCode string) {
			if len(svgCode) == 0 {
				return
			}
			once_calculate_checksum.Do(func() {
				checksum := Sha256(svgCode)
				if len(checksum) == 0 {
					return
				}
				pending_viewport_placeholder_svg_checksum.Store(checksum)
			})
		}(gc, svgCode)
	}

	if pending_viewport_placeholder_svg_checksum.Load() != nil {
		fileETag := fmt.Sprintf("%x", pending_viewport_placeholder_svg_checksum.Load())
		if match := c.GetHeader("If-None-Match"); match == fileETag {
			c.Status(http.StatusNotModified) // dont need to serve the asset, tell the browser to rely on its cache
			return
		}
		c.Header("ETag", fileETag) // set the tag to prevent future load from re-requesting the same asset over again

	}
	c.Data(http.StatusOK, "image/svg+xml", []byte(svgCode))
	return
}

func r_get_asset(c *gin.Context) {
	requestedAt := time.Now().UTC()
	sem_asset_requests.Acquire()
	if since := time.Since(requestedAt).Seconds(); since > 1.7 {
		log.Printf("took %.0f seconds to acquire sem_asset_requests queue position", since)
	}
	defer sem_asset_requests.Release()

	defer func(c *gin.Context) {
		if r := recover(); r != nil {
			fmt.Println("Recovered from panic:", r)
			c.AbortWithStatus(http.StatusInternalServerError)
			return
		}
	}(c)

	directory := c.Param("directory")
	filename := c.Param("filename")
	filePath := fmt.Sprintf("bundled/assets/%v/%v", directory, filename)

	file, file_err := bundled_files.Open(filePath)
	defer func(filePath string, file fs.File) { // ensure the file handler is closed
		err := file.Close()
		if err != nil { // handle the close error if applicable
			log.Printf("failed to close r_get_asset file %v due to err %v", filePath, err)
			return
		}
	}(filePath, file) // pass in the filePath and the file into the defer func

	if file_err != nil { // received an err on the file
		log.Printf("received an err on r_get_asset bundled_files.Open(%v) with err %v", filePath, file_err)
		c.String(http.StatusInternalServerError, file_err.Error())
		return
	}

	file_info, info_err := file.Stat() // get info about file
	if info_err != nil {               // error getting info
		log.Printf("received an err on r_get_asset file('%v').Stat() with err %v", filePath, info_err)
		c.String(http.StatusInternalServerError, info_err.Error())
		return
	}

	fileETag := fmt.Sprintf("%x", file_info.ModTime().UnixNano())
	if match := c.GetHeader("If-None-Match"); match == fileETag {
		c.Status(http.StatusNotModified) // dont need to serve the asset, tell the browser to rely on its cache
		return
	}
	c.Header("ETag", fileETag) // set the tag to prevent future load from re-requesting the same asset over again

	// set the return type of data based on the filename suffix
	switch {
	case strings.HasSuffix(filename, ".csv"):
		c.Header("Content-Type", "text/csv")
	case strings.HasSuffix(filename, ".eot"):
		c.Header("Content-Type", "application/vnd.ms-fontobject")
	case strings.HasSuffix(filename, ".epub"):
		c.Header("Content-Type", "application/epub+zip")
	case strings.HasSuffix(filename, ".gif"):
		c.Header("Content-Type", "image/gif")
	case strings.HasSuffix(filename, ".otf"):
		c.Header("Content-Type", "font/otf")
	case strings.HasSuffix(filename, ".pdf"):
		c.Header("Content-Type", "application/pdf")
	case strings.HasSuffix(filename, ".txt"):
		c.Header("Content-Type", "text/plain")
	case strings.HasSuffix(filename, ".js"):
		c.Header("Content-Type", "text/javascript")
	case strings.HasSuffix(filename, ".css"):
		c.Header("Content-Type", "text/css")
	case strings.HasSuffix(filename, ".woff"):
		c.Header("Content-Type", "font/woff")
	case strings.HasSuffix(filename, ".woff2"):
		c.Header("Content-Type", "font/woff2")
	case strings.HasSuffix(filename, ".ico"):
		c.Header("Content-Type", "image/x-icon")
	case strings.HasSuffix(filename, ".jpg"):
		c.Header("Content-Type", "image/jpeg")
	case strings.HasSuffix(filename, ".png"):
		c.Header("Content-Type", "image/png")
	case strings.HasSuffix(filename, ".svg"):
		c.Header("Content-Type", "image/svg+xml")
	case strings.HasSuffix(filename, ".map"):
		c.Header("Content-Type", "application/json")
	default:
		c.String(http.StatusInternalServerError, "unsupported asset type")
		return
	}

	file_bytes, copy_err := io.ReadAll(file) // get all of the bytes inside the file
	if copy_err != nil {
		log.Printf("received an err on r_get_asset io.ReadAll(file('%v')) with err %v", filePath, copy_err)
		c.String(http.StatusInternalServerError, copy_err.Error())
		return
	}

	c.Header("Cache-Control", fmt.Sprintf("max-age=%v", *flag_i_cache_control_assets_seconds)) // dont have the browser re-request this file for seconds

	http.ServeContent(c.Writer, c.Request, "", time.Now(), bytes.NewReader(file_bytes))
}

func r_get_database_page_image(c *gin.Context) {
	requestedAt := time.Now().UTC()
	sem_image_views.Acquire()
	if since := time.Since(requestedAt).Seconds(); since > 1.7 {
		log.Printf("took %.0f seconds to acquire sem_image_views queue position", since)
	}
	defer sem_image_views.Release()

	directory := *flag_s_database
	if len(directory) == 0 {
		c.String(http.StatusNotFound, fmt.Sprintf("failed to load database %v", directory))
		return
	}

	resolvedPath, symlink_err := resolve_symlink(directory)
	if symlink_err != nil {
		c.String(http.StatusInternalServerError, fmt.Sprintf("failed to load %v", directory))
		return
	}
	directory = resolvedPath
	directory = strings.ReplaceAll(directory, filepath.Join(*flag_s_database, *flag_s_database), *flag_s_database)

	log.Printf("using directory %v", directory)

	document_identifier := c.Param("document_identifier")
	document_identifier = reg_identifier.ReplaceAllString(document_identifier, "") // sanitize input

	page_identifier := c.Param("page_identifier")
	page_identifier = reg_identifier.ReplaceAllString(page_identifier, "") // sanitize input

	size := c.Param("size")
	if !reg_image_size.MatchString(size) { // sanitize input
		c.String(http.StatusForbidden, "invalid size %v", size)
		return
	}

	log.Printf("using document_identifier = %v ; page_identifier = %v ; size = %v", document_identifier, page_identifier, size)

	acceptable_image_size := (strings.HasPrefix(size, "original") ||
		strings.HasPrefix(size, "large") ||
		strings.HasPrefix(size, "medium") ||
		strings.HasPrefix(size, "small") ||
		strings.HasPrefix(size, "social")) && strings.HasSuffix(size, ".jpg")

	if !acceptable_image_size { // validate size
		c.String(http.StatusNotFound, "no such page found")
		return
	}

	document_directory, is_found := m_document_identifier_directory[document_identifier] // validate document_identifier
	if !is_found {
		c.String(http.StatusInternalServerError, "failed to find %v-%v.%v", document_identifier, page_identifier, size)
		return
	}

	mode := gin_is_dark_mode(c)
	if mode == "1" {
		mode = "dark"
	} else {
		mode = "light"
	}

	mu_page_identifier_page_number.RLock()
	page_number, page_number_defined := m_page_identifier_page_number[page_identifier] // validate page_identifier
	mu_page_identifier_page_number.RUnlock()
	if !page_number_defined {
		c.String(http.StatusInternalServerError, "dont know which page number belongs to %v/%v/%v", document_directory, document_identifier, page_identifier)
		return
	}

	image_name := fmt.Sprintf("page.%v.%06d.%v", mode, page_number, size)
	image_path := filepath.Join(directory, document_directory, "pages", image_name) // %v/%v/pages/
	image_path = strings.ReplaceAll(image_path, filepath.Join(*flag_s_database, *flag_s_database), *flag_s_database)

	image_info, stat_err := os.Stat(image_path)
	if stat_err != nil {
		log.Printf("failed to stat %v due to %v", image_path, stat_err)
		c.String(http.StatusNotFound, "no such cover")
		return
	}

	fileETag := fmt.Sprintf("%x", image_info.ModTime().UnixNano())
	if match := c.GetHeader("If-None-Match"); match == fileETag {
		c.Status(http.StatusNotModified)
		return
	}
	c.Header("ETag", fileETag)

	if image_info.Size() == 0 {
		log.Printf("failed to pass the .Size() > 0 check on %v due", image_path)
		c.String(http.StatusInternalServerError, "failed to load cover")
		return
	}

	file_bytes, file_err := os.ReadFile(image_path)
	if file_err != nil {
		c.String(http.StatusInternalServerError, "failed to open %v due to %v", image_name, file_err)
		return
	}

	c.Header("Content-Type", "image/jpg")
	c.Header("Cache-Control", fmt.Sprintf("max-age=%v", *flag_i_cache_control_database_seconds)) // dont have the browser re-request this file for seconds
	http.ServeContent(c.Writer, c.Request, image_name, time.Now(), bytes.NewReader(file_bytes))
}
